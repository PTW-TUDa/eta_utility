stages:
  - setup
  - check
  - test
  - deploy

.default_rules:
  rules:
    # Create pipelines for merge request events
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Create a pipeline for the default branch
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # Dont create a branch pipeline while there are open merge requests
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never

.on_version_tag_rule:
  rules:
    # Deploy if a version tag was created
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

workflow:
  rules:
    # Create pipelines for merge request events
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Create a pipeline for the default branch
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # Create a pipeline if a version tag was created
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(-[0-9A-Za-z]+)?$/'
    # Dont create a branch pipeline while there are open merge requests
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  POETRY_VERSION: 1.8.2
  POETRY_CACHE_DIR: /root/.cache/pypoetry
  PIP_CACHE_DIR: /root/.cache/pip

default:
  tags:
    - python
    - docker
  interruptible: true
  image: python:3.10
  before_script:
    - apt-get update
    - python --version
    - rm -rf .cache .pip_cache .pytest_cache .mypy_cache dist doc eta_utility.egg-info build
    - rm -rf docs/_build docs/_stubs
    - ls -la
    - python -m venv .venv
    - pip install poetry==$POETRY_VERSION
    # Remove torch and add torch+cpu because nvidia packages (cuda) are not needed
    - poetry remove torch
    - poetry source add --priority explicit pytorch_cpu https://download.pytorch.org/whl/cpu
    - poetry add --source pytorch_cpu torch==2.0.0
    - poetry install -E develop
    - . .venv/bin/activate

.julia-config: &julia_config  # Settings for julia jobs
  image: julia:1.7.2
  allow_failure: true
  before_script:
    - apt-get update
    # Install python3 (python refers to python2 in julia image)
    - apt install python3 python3-pip python3-venv -y
    - python3 --version
    - rm -rf .cache .pip_cache .pytest_cache .mypy_cache dist doc eta_utility.egg-info build
    - rm -rf docs/_build docs/_stubs
    - ls -la
    - python3 -m venv .venv
    - pip install poetry==$POETRY_VERSION
    # Remove torch and add torch+cpu because nvidia packages (cuda) are not needed
    - poetry remove torch
    - poetry source add --priority explicit pytorch_cpu https://download.pytorch.org/whl/cpu
    - poetry add --source pytorch_cpu torch==2.0.0
    - poetry install -E develop
    - . .venv/bin/activate
    - pip install julia
    - julia -e 'ENV["PYTHON"] = Sys.which("python3"); using Pkg; Pkg.add("PyCall"); Pkg.build("PyCall"); Pkg.add("JuliaFormatter")'
    - install-julia
  retry:
    max: 1
    when: script_failure

# Default cache setting for all jobs
# Cache gets invalidated when poetry.lock changes
cache: &poetry_cache
  key: "global-deps-$(checksum poetry.lock)"
  paths:
    - ${POETRY_CACHE_DIR}
    - ${PIP_CACHE_DIR}
  policy: pull

# Job to update pip cache
update-cache:
  stage: setup
  script:
    - poetry install -E develop --sync
  cache:
    <<: *poetry_cache
    policy: pull-push

isort:
  stage: check
  script:
    - isort --version
    - isort -c -v .

black:
  stage: check
  script:
    - black --version
    - black --check --config pyproject.toml eta_utility/ test/

flake8:
  stage: check
  script:
    - pip install flake8-json  # Necessary to output codeclimate format
    - flake8 --version
    - flake8 --toml-config=pyproject.toml --format=codeclimate --tee --output-file=flake8.json eta_utility examples test
  artifacts:
    reports:
      codequality: flake8.json

mypy:
  stage: check
  script:
    - mypy --version
    - mypy --config-file pyproject.toml

check-poetry:
  stage: check
  script:
    - poetry --version
    - poetry check

secret_detection:
  stage: check
  before_script: []
  rules:
    - !reference [.default_rules, rules]

test3.10: &test_config
  stage: test
  script:
  - pytest --cov --cov-report term --junitxml=./junit.xml
  retry:
    max: 1
    when: script_failure
  artifacts:
    paths:
      - junit.xml
    reports:
      junit: junit.xml



# This job has test coverage report
test3.9:
  <<: *test_config
  image: python:3.9
  coverage: '/TOTAL.*\s+(\d+%)$/'
  script:
  - pytest --cov --junitxml=./junit.xml --cov-report term --cov-report xml:coverage.xml
  artifacts:
    paths:
      - junit.xml
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test3.11:
  <<: *test_config
  image: python:3.11

test3.11_updated_deps:
  <<: *test_config
  image: python:3.11
  script:
    - poetry update
    - pytest --cov --junitxml=./junit.xml


linkcheck-docs:
  stage: test
  script:
    - pip install sphinx sphinx-rtd-theme sphinx_copybutton
    - rm -rf docs/_build docs/_stubs
    - cd docs
    - python -m sphinx -b linkcheck . _build/linkcheck
  retry:
    max: 2
    when: script_failure

build_local:
  stage: deploy
  # Credentials for local repository
  variables:
    PASSWORD: '${CI_JOB_TOKEN}'
    USERNAME: 'gitlab-ci-token'
  script:
    - rm -rf dist build
    - poetry config repositories.eta-fabrik https://$CI_SERVER_HOST/api/v4/projects/$CI_PROJECT_ID/packages/pypi
    - poetry publish --build --username $USERNAME --password $PASSWORD --repository eta-fabrik
  rules:
    - !reference [.on_version_tag_rule, rules]

# build the sources
build:
  stage: deploy
  # Credentials for pypi repository
  variables:
    PASSWORD: '${PYPI_UPLOAD_TOKEN}'
    USERNAME: '__token__'
  needs:
    - pages
    - build_local
  script:
    - rm -rf dist
    - pip install poetry
    - poetry publish --build --username $USERNAME --password $PASSWORD
  artifacts:
    name: "eta_utility-build-$CI_COMMIT_REF_NAME-$CI_JOB_STATUS"
    paths:
      - dist/
      - eta_utility.egg-info/
  rules:
    - !reference [.on_version_tag_rule, rules]

pages:
  stage: deploy
  script:
    - sphinx-build --version && sphinx-apidoc --version
    - rm -rf docs/_build docs/_stubs public/html/*
    - cd docs
    - make html
    - mv _build/html ../public
  artifacts:
    name: "eta_utility-docs-$CI_COMMIT_REF_NAME"
    paths:
      - public/

# Create readthedocs documentation
readthedocs:
  stage: deploy
  needs:
    - pages
    - build_local
  before_script: []
  script:
    - echo $CI_COMMIT_TAG
    - curl -X POST -d "branches=main" -d "token=$READTHEDOCS_TOKEN" https://readthedocs.org/api/v2/webhook/eta-utility/211185/
  rules:
    - !reference [.on_version_tag_rule, rules]
