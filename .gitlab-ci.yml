stages:
  - setup
  - check
  - test
  - deploy

workflow:
  rules:
    # Don't create a merge request pipeline for the default branch
    - if:  $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $CI_DEFAULT_BRANCH
      when: never
    # Instead, create a branch pipeline for development
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # Create merge request pipeline for other branches
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Create a pipeline for tags
    - if: $CI_COMMIT_TAG

.on_version_tag_rule:
  rules:
    # Deploy if a version tag was created
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  # Poetry settings
  POETRY_VERSION: 1.8.3
  REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH/poetry${POETRY_VERSION}

default:
  tags:
    - python
    - docker
  interruptible: true
  image: ${REGISTRY_IMAGE}:py3.9
  before_script:
    - python --version
    - rm -rf dist doc eta_utility.egg-info build
    - rm -rf docs/_build docs/_stubs
    - ls -la
    # Install development dependencies
    - poetry install -E develop --sync
  # Cache gets invalidated when poetry.lock changes
  cache:
    key: "global-deps-$(checksum poetry.lock)"
    paths:
      - ${POETRY_CACHE_DIR}
      - ${PIP_CACHE_DIR}
    policy: pull


# Job to update pip cache
update-cache:
  stage: setup
  before_script: []
  script:
    # Remove torch and add torch+cpu because nvidia packages (cuda) are not needed
    - poetry remove torch
    - poetry source add --priority explicit pytorch_cpu https://download.pytorch.org/whl/cpu
    - poetry add --source pytorch_cpu torch==2.0.0
    - poetry install -E develop --sync
  cache:
    policy: pull-push
  artifacts:
    paths:
      - pyproject.toml
      - poetry.lock
  dependencies: []

ruff:
  stage: check
  script:
    - ruff --version
    - ruff check
    - ruff format

codespell:
  stage: check
  script:
    - codespell --version
    - codespell

mypy:
  stage: check
  script:
    - mypy --version
    - mypy --config-file pyproject.toml

poetry:
  stage: check
  script:
    - poetry --version
    - poetry check

secret_detection:
  stage: check
  before_script: []

linkcheck-docs:
  stage: check
  script:
    - rm -rf docs/_build docs/_stubs
    - cd docs
    - python -m sphinx -b linkcheck . _build/linkcheck
  retry:
    max: 2
    when: script_failure

julia:
  stage: check
  image: julia:1.9
  before_script: []
  script:
    - julia -e '
        using Pkg;
        Pkg.add("JuliaFormatter");
        using JuliaFormatter;
        if !format("eta_utility/ju_extensions", verbose=true) & !format("test/resources/")
        @error "Some files have not been formatted !!!";
        exit(1);
        end'

.test:
  stage: test
  script:
  - pytest
  retry:
    max: 1
    when: script_failure

.coverage:
  extends: .test
  coverage: '/TOTAL.*\s+(\d+%)$/'
  script:
  - pytest --cov --junitxml=./junit.xml --cov-report term --cov-report xml:coverage.xml
  artifacts:
    paths:
      - junit.xml
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# This job has test coverage report
test3.9:
  extends: .coverage

test3.10:
  extends: .test
  image: ${REGISTRY_IMAGE}:py3.10

test3.11:
  extends: .test
  image: ${REGISTRY_IMAGE}:py3.11

test3.11_updated_deps:
  extends: .test
  image: ${REGISTRY_IMAGE}:py3.11
  script:
    - poetry update
    - pytest --cov --cov-report term --junitxml=./junit.xml


test-julia:
  stage: test
  before_script: []
  script:
    - julia -e '
      ENV["PYTHON"] = Sys.which("python");
      ENV["PYCALL_JL_RUNTIME_PYTHON"] = Sys.which("python");
      using Pkg;
      Pkg.activate("eta_utility/ju_extensions");
      Pkg.instantiate();
      Pkg.test()'
  retry:
    max: 1
    when: script_failure

.deploy:
  stage: deploy
  rules:
    - !reference [.on_version_tag_rule, rules]

# Publish local gitlab pages
pages:
  extends: .deploy
  script:
    - sphinx-build --version && sphinx-apidoc --version
    - rm -rf docs/_build docs/_stubs public/html/*
    - cd docs
    - make html
    - mv _build/html ../public
  artifacts:
    name: "eta_utility-docs-$CI_COMMIT_REF_NAME"
    paths:
      - public/

deploy-local:
  extends: .deploy
  # Credentials for local repository
  variables:
    PASSWORD: '${CI_JOB_TOKEN}'
    USERNAME: 'gitlab-ci-token'
  script:
    - rm -rf dist build
    - poetry config repositories.eta-fabrik $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/pypi
    - poetry publish --build --username $USERNAME --password $PASSWORD --repository eta-fabrik

# build the sources
deploy-pypi:
  extends: .deploy
  # Credentials for pypi repository
  variables:
    PASSWORD: '${PYPI_UPLOAD_TOKEN}'
    USERNAME: '__token__'
  needs:
    - deploy-local
  script:
    - rm -rf dist
    - poetry publish --build --username $USERNAME --password $PASSWORD
  artifacts:
    name: "eta_utility-build-$CI_COMMIT_REF_NAME-$CI_JOB_STATUS"
    paths:
      - dist/
      - eta_utility.egg-info/

# Create readthedocs documentation
deploy-readthedocs:
  extends: .deploy
  needs:
    - deploy-local
    - pages
  before_script: []
  script:
    - echo $CI_COMMIT_TAG
    - curl -X POST -d "branches=main" -d "token=$READTHEDOCS_TOKEN" https://readthedocs.org/api/v2/webhook/eta-utility/211185/
